{"version":3,"sources":["components/ImageCard.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","alt","key","id","src","image","onClick","chooseImg","App","state","images","count","highScore","arr","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","_this","includes","setState","console","log","push","_this2","this","map","components_ImageCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAWeA,MARf,SAAmBC,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,WAAWC,IAAKN,EAAMO,GAAIC,IAAKR,EAAMS,MAAOC,QAAS,kBAAMV,EAAMW,UAAUX,EAAMO,gBC+EvFK,6MA7EbC,MAAQ,CACNC,SACAC,MAAO,EACPC,UAAW,EACXC,IAAK,GACLC,QAAS,MAGXA,QAAU,SAAAC,GAIR,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,KAGTR,UAAY,SAAAJ,GACNoB,EAAKd,MAAMI,IAAIW,SAASrB,IACtBoB,EAAKd,MAAME,MAAQY,EAAKd,MAAMG,WAChCW,EAAKE,SAAS,CAAEb,UAAWW,EAAKd,MAAME,QAExCY,EAAKE,SAAS,CAAEd,MAAO,EAAGE,IAAK,KAC/Ba,QAAQC,IAAIJ,EAAKd,MAAMI,OAEvBU,EAAKE,SAAS,CAAEd,MAAOY,EAAKd,MAAME,MAAQ,IAC1CY,EAAKd,MAAMI,IAAIe,KAAKzB,GACpBuB,QAAQC,IAAIJ,EAAKd,MAAMI,MAEzBU,EAAKT,QAAQS,EAAKd,MAAMC,iFAGjB,IAAAmB,EAAAC,KACP,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAKbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UAA8B8B,KAAKrB,MAAME,QAE3Cd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,gBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,eAAuC8B,KAAKrB,MAAMG,aAGtDf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ8B,KAAKrB,MAAMC,OAAOqB,IAAI,SAAA1B,GAAK,OAC1BR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACiC,EAAD,CACEzB,UAAWsB,EAAKtB,UAChBJ,GAAIE,EAAMF,GACVD,IAAKG,EAAMF,GACXE,MAAOA,EAAMA,oBArEX4B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ff781d5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ImageCard.css\";\n\nfunction ImageCard(props) {\n    return (\n        <div className=\"imageStuff\">\n            <img alt=\"ultraman\" key={props.id} src={props.image} onClick={() => props.chooseImg(props.id)} />\n        </div>\n    )\n}\n\nexport default ImageCard;","import React, { Component } from 'react';\nimport './App.css';\nimport ImageCard from \"./components/ImageCard\";\nimport images from \"./images.json\"\n// import ScoreBoard from \"./components/ScoreBoard\"\n\nclass App extends Component {\n\n  state = {\n    images,\n    count: 0,\n    highScore: 0,\n    arr: [],\n    shuffle: []\n  };\n\n  shuffle = array => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  chooseImg = id => {\n    if (this.state.arr.includes(id)) {\n      if (this.state.count > this.state.highScore) {\n        this.setState({ highScore: this.state.count })\n      }\n      this.setState({ count: 0, arr: [] })\n      console.log(this.state.arr);\n    } else {\n      this.setState({ count: this.state.count + 1 });\n      this.state.arr.push(id);\n      console.log(this.state.arr);\n    }\n    this.shuffle(this.state.images);\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        {/* <ScoreBoard \n        count={this.count}\n        highScore={this.highScore}\n      /> */}\n        <div className=\"row\">\n          <div className=\"col-md-3 countDiv\">\n            <h3 className=\"count\">Score: {this.state.count}</h3>\n          </div>\n          <div className=\"col-md-6\">\n            <h1 className=\"title\">CLICKY GAME</h1>\n          </div>\n          <div className=\"col-md-3 scoreDiv\">\n            <h3 className=\"highScore\">High Score: {this.state.highScore}</h3>\n          </div>\n        </div>\n        <div className=\"row\">\n          {this.state.images.map(image => (\n            <div className=\"col-md-3 imgDiv\">\n              <ImageCard\n                chooseImg={this.chooseImg}\n                id={image.id}\n                key={image.id}\n                image={image.image}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}